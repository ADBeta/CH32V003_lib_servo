
servo-test.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <InterruptVector>:
   0:	0a00006f          	j	a0 <_einit>
   4:	00000000          	.word	0x00000000
   8:	00000118          	.word	0x00000118
   c:	00000116          	.word	0x00000116
	...
  30:	00000116          	.word	0x00000116
  34:	00000000          	.word	0x00000000
  38:	00000116          	.word	0x00000116
  3c:	00000000          	.word	0x00000000
  40:	00000116          	.word	0x00000116
  44:	00000116          	.word	0x00000116
  48:	00000116          	.word	0x00000116
  4c:	00000116          	.word	0x00000116
  50:	00000116          	.word	0x00000116
  54:	00000116          	.word	0x00000116
  58:	00000116          	.word	0x00000116
  5c:	00000116          	.word	0x00000116
  60:	00000116          	.word	0x00000116
  64:	00000116          	.word	0x00000116
  68:	00000116          	.word	0x00000116
  6c:	00000116          	.word	0x00000116
  70:	00000116          	.word	0x00000116
  74:	00000116          	.word	0x00000116
  78:	00000116          	.word	0x00000116
  7c:	00000116          	.word	0x00000116
  80:	00000116          	.word	0x00000116
  84:	00000116          	.word	0x00000116
  88:	00000116          	.word	0x00000116
  8c:	00000116          	.word	0x00000116
  90:	00000116          	.word	0x00000116
  94:	00000116          	.word	0x00000116
  98:	00000116          	.word	0x00000116
  9c:	0000                	.insn	2, 0x
	...

Disassembly of section .text:

000000a0 <handle_reset>:
  a0:	20000197          	auipc	gp,0x20000
  a4:	76018193          	addi	gp,gp,1888 # 20000800 <__global_pointer$>
  a8:	00018113          	mv	sp,gp
  ac:	08000513          	li	a0,128
  b0:	30051073          	csrw	mstatus,a0
  b4:	468d                	li	a3,3
  b6:	00000517          	auipc	a0,0x0
  ba:	f4a50513          	addi	a0,a0,-182 # 0 <InterruptVector>
  be:	8d55                	or	a0,a0,a3
  c0:	30551073          	csrw	mtvec,a0
  c4:	20000517          	auipc	a0,0x20000
  c8:	f3c50513          	addi	a0,a0,-196 # 20000000 <timer_init.0>
  cc:	80418593          	addi	a1,gp,-2044 # 20000004 <_ebss>
  d0:	4601                	li	a2,0
  d2:	00b55663          	bge	a0,a1,de <handle_reset+0x3e>
  d6:	c110                	sw	a2,0(a0)
  d8:	0511                	addi	a0,a0,4
  da:	feb54ee3          	blt	a0,a1,d6 <handle_reset+0x36>
  de:	24c00513          	li	a0,588
  e2:	20000597          	auipc	a1,0x20000
  e6:	f1e58593          	addi	a1,a1,-226 # 20000000 <timer_init.0>
  ea:	20000617          	auipc	a2,0x20000
  ee:	f1660613          	addi	a2,a2,-234 # 20000000 <timer_init.0>
  f2:	00c58863          	beq	a1,a2,102 <handle_reset+0x62>
  f6:	4114                	lw	a3,0(a0)
  f8:	c194                	sw	a3,0(a1)
  fa:	0511                	addi	a0,a0,4
  fc:	0591                	addi	a1,a1,4
  fe:	fec59ae3          	bne	a1,a2,f2 <handle_reset+0x52>
 102:	e000f7b7          	lui	a5,0xe000f
 106:	4705                	li	a4,1
 108:	c398                	sw	a4,0(a5)
 10a:	18800793          	li	a5,392
 10e:	34179073          	csrw	mepc,a5
 112:	30200073          	mret

00000116 <ADC1_IRQHandler>:
 116:	a001                	j	116 <ADC1_IRQHandler>

00000118 <NMI_Handler>:
 118:	40021737          	lui	a4,0x40021
 11c:	471c                	lw	a5,8(a4)
 11e:	008006b7          	lui	a3,0x800
 122:	8fd5                	or	a5,a5,a3
 124:	c71c                	sw	a5,8(a4)

00000126 <SystemInit>:
 126:	400227b7          	lui	a5,0x40022
 12a:	4705                	li	a4,1
 12c:	c398                	sw	a4,0(a5)
 12e:	400217b7          	lui	a5,0x40021
 132:	01080737          	lui	a4,0x1080
 136:	0007a223          	sw	zero,4(a5) # 40021004 <__global_pointer$+0x20020804>
 13a:	08170713          	addi	a4,a4,129 # 1080081 <lib_servo.c.b59ea0b0+0x107e03c>
 13e:	c398                	sw	a4,0(a5)
 140:	009f0737          	lui	a4,0x9f0
 144:	c798                	sw	a4,8(a5)
 146:	40021737          	lui	a4,0x40021
 14a:	431c                	lw	a5,0(a4)
 14c:	00679693          	slli	a3,a5,0x6
 150:	fe06dde3          	bgez	a3,14a <SystemInit+0x24>
 154:	435c                	lw	a5,4(a4)
 156:	400216b7          	lui	a3,0x40021
 15a:	9bf1                	andi	a5,a5,-4
 15c:	0027e793          	ori	a5,a5,2
 160:	c35c                	sw	a5,4(a4)
 162:	4721                	li	a4,8
 164:	42dc                	lw	a5,4(a3)
 166:	8bb1                	andi	a5,a5,12
 168:	fee79ee3          	bne	a5,a4,164 <SystemInit+0x3e>
 16c:	e00007b7          	lui	a5,0xe0000
 170:	0f878793          	addi	a5,a5,248 # e00000f8 <__global_pointer$+0xbffff8f8>
 174:	0007a023          	sw	zero,0(a5)
 178:	e00007b7          	lui	a5,0xe0000
 17c:	0f478793          	addi	a5,a5,244 # e00000f4 <__global_pointer$+0xbffff8f4>
 180:	08000713          	li	a4,128
 184:	c398                	sw	a4,0(a5)
 186:	8082                	ret

00000188 <main>:

#include <stdio.h>


int main() 
{
 188:	1151                	addi	sp,sp,-12
 18a:	c406                	sw	ra,8(sp)
	SystemInit();
 18c:	3f69                	jal	126 <SystemInit>

void servo_init(const servo_config_t *servo)
{
	// Initialise the timer, only if it has not been set up already
	static bool timer_init = false;
	if(!timer_init) 
 18e:	200006b7          	lui	a3,0x20000
 192:	0006c783          	lbu	a5,0(a3) # 20000000 <timer_init.0>
 196:	eba5                	bnez	a5,206 <main+0x7e>
	{
		// Enable TIM2 Clock
		RCC->APB1PCENR |= RCC_APB1Periph_TIM2;
 198:	400217b7          	lui	a5,0x40021
 19c:	4fd8                	lw	a4,28(a5)
 19e:	00176713          	ori	a4,a4,1
 1a2:	cfd8                	sw	a4,28(a5)

		// Reset TIM2, Inits all registers
		RCC->APB1PRSTR |= RCC_APB1Periph_TIM2;
 1a4:	4b98                	lw	a4,16(a5)
 1a6:	00176713          	ori	a4,a4,1
 1aa:	cb98                	sw	a4,16(a5)
		RCC->APB1PRSTR &= ~RCC_APB1Periph_TIM2;
 1ac:	4b98                	lw	a4,16(a5)
 1ae:	9b79                	andi	a4,a4,-2
 1b0:	cb98                	sw	a4,16(a5)

		// Set Prescaler (46kHz)
		TIM2->PSC = 0x0003;
 1b2:	400007b7          	lui	a5,0x40000
 1b6:	470d                	li	a4,3
 1b8:	02e79423          	sh	a4,40(a5) # 40000028 <__global_pointer$+0x1ffff828>
		// Set PWM Max Value (Autoreload Value)
		TIM2->ATRLR = 254;
 1bc:	0fe00713          	li	a4,254
 1c0:	02e79623          	sh	a4,44(a5)

		// Set the Compare Capture Register for Channel 3
		// TIM2_OC3M = 0b111 - PWM Mode 2 - Enable Preload
		TIM2->CHCTLR2 |= TIM_OC3M_2 | TIM_OC3M_1 | TIM_OC3M_0 | TIM_OC3PE;
 1c4:	01c7d703          	lhu	a4,28(a5)
 1c8:	07876713          	ori	a4,a4,120
 1cc:	00e79e23          	sh	a4,28(a5)

		// Enable auto-reload
		TIM2->CTLR1 |= TIM_ARPE;
 1d0:	0007d703          	lhu	a4,0(a5)
 1d4:	08076713          	ori	a4,a4,128
 1d8:	00e79023          	sh	a4,0(a5)

		// Enable channel output, set polarity ACTIVE_LOW
		TIM2->CCER |= TIM_CC3E | TIM_CC3P;
 1dc:	0207d703          	lhu	a4,32(a5)
 1e0:	30076713          	ori	a4,a4,768
 1e4:	02e79023          	sh	a4,32(a5)

		// Initialise Counter
		TIM2->SWEVGR |= TIM_UG;
 1e8:	0147d703          	lhu	a4,20(a5)
 1ec:	00176713          	ori	a4,a4,1
 1f0:	00e79a23          	sh	a4,20(a5)

		// Enable TIM2
		TIM2->CTLR1 |= TIM_CEN;
 1f4:	0007d703          	lhu	a4,0(a5)
 1f8:	00176713          	ori	a4,a4,1
 1fc:	00e79023          	sh	a4,0(a5)

		timer_init = true;
 200:	4785                	li	a5,1
 202:	00f68023          	sb	a5,0(a3)
	}

	// Set up the selected Servo Pin
	RCC->APB2PCENR |= servo->port_rcc;
 206:	40021737          	lui	a4,0x40021
 20a:	4f1c                	lw	a5,24(a4)

	// Loop forever
	uint8_t duty = 0;
	while(1)
	{
		TIM2->CH3CVR = duty++;
 20c:	40000537          	lui	a0,0x40000
#endif

void DelaySysTick( uint32_t n )
{
#ifdef CH32V003
	uint32_t targend = SysTick->CNT + n;
 210:	e000f5b7          	lui	a1,0xe000f
 214:	0107e793          	ori	a5,a5,16
 218:	cf1c                	sw	a5,24(a4)

	servo->port_reg->CFGLR &= ~(0x0F << (4 * servo->port_pin));
 21a:	400117b7          	lui	a5,0x40011
 21e:	4398                	lw	a4,0(a5)
 220:	9b41                	andi	a4,a4,-16
 222:	c398                	sw	a4,0(a5)
	servo->port_reg->CFGLR |= (GPIO_Speed_10MHz | GPIO_CNF_OUT_PP_AF) << (4 * servo->port_pin);
 224:	4398                	lw	a4,0(a5)
 226:	00976713          	ori	a4,a4,9
 22a:	c398                	sw	a4,0(a5)
 22c:	6705                	lui	a4,0x1
	uint8_t duty = 0;
 22e:	4781                	li	a5,0
 230:	77070713          	addi	a4,a4,1904 # 1770 <ch32v003fun.c.07475690+0x90f>
		TIM2->CH3CVR = duty++;
 234:	86be                	mv	a3,a5
 236:	dd54                	sw	a3,60(a0)
 238:	4590                	lw	a2,8(a1)
 23a:	0785                	addi	a5,a5,1 # 40011001 <__global_pointer$+0x20010801>
 23c:	0ff7f793          	zext.b	a5,a5
 240:	963a                	add	a2,a2,a4
	while( ((int32_t)( SysTick->CNT - targend )) < 0 );
 242:	4594                	lw	a3,8(a1)
 244:	8e91                	sub	a3,a3,a2
 246:	fe06cee3          	bltz	a3,242 <main+0xba>
 24a:	b7ed                	j	234 <main+0xac>
